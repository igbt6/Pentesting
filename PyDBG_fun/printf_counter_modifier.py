from pydbg.pydbg import *
from pydbg.pydbg.defines import *
import struct
import random

#callback which will be set on the memory
def printf_counter_modifier_callback(dbg):
    #reads in the value of the counter at ESP + 0x8 as a DWORD
    parameter_addr = dbg.context.Esp + 0x8
    counter = dbg.read_process_memory(parameter_addr, 4)
    counter = struct.unpack("L", counter)[0]
    random_counter = struct.packt("L", random.randint(1, 100))
    dbg.write_process_memory(parameter_addr, random_counter)
    
    return DBG_CONTINUE
    
if __name__ == "main":
    dbg = pydbg()
    pid = input("Enter the test_process_printfloop.py PID:")
    
    #atach the debugger to that process
    dbg.attach(int(pid))
    printf_func_addr = dbg.func_resolve("msvcrt", "printf")
    #set breakpoint on printf method
    dbg.bp_set(printf_address, descrition="printf_address", handler=printf_counter_modifier_callback)
    #resume the process
    dbg.run()
    