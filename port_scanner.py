#!/usr/bin/env python
import sys
import threading 
import socket
import subprocess
from collections import OrderedDict
import re
from datetime import datetime

PY2 = sys.version_info[0] == 2
if PY2:
    raise Exception("Please use finally Python3.x version :)")

'''==================== DESCRIPTION ===================='''
# Script helps you to find all open ports for given IP address (IPv4)
'''==================== DESCRIPTION-END =================='''    


'''==================== USAGE ===================='''
# look at the main method
'''====================  USAGE-END =================='''

'''==================== GLOBAL SETTINGS ===================='''
NUMBER_OF_PORTS_PER_THREAD = 100
NUMBER_OF_PORTS_TO_BE_SCANNED= 10000
DEFAULT_START_PORT= 10
DEFAULT_CONNECTION_TIMEOUT= 3 #seconds
DEFAULT_IP_ADDR= "96.1.78.73"
'''==================== GLOBAL SETTINGS-END =================='''

class IPaddress():
    
    def __init__(self,ipAddr):
        
        self._ip= [0]*4
        reg= re.match(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)',ipAddr)
        if not reg:
            raise ValueError("Incorrect IP format")
        self._ip[0]=int(reg.group(4))
        self._ip[1]=int(reg.group(3))
        self._ip[2]=int(reg.group(2))
        self._ip[3]=int(reg.group(1))
           
    def __str__(self):
        return "%d.%d.%d.%d" % (self._ip[3], self._ip[2], self._ip[1], self._ip[0])
        
    def inc(self):
        self._ip[0] +=1
        if(not self._ip[0] %256):
            self._ip[0] =0
            self._ip[1]+=1
            if(not self._ip[1] %256):
                self._ip[1] =0
                self._ip[2]+=1
                if(not self._ip[2] %256):
                    self._ip[2] =0
                    self._ip[3]+=1
                    if(not self._ip[3] %256):
                        self._ip[0]=0
                        self._ip[1]=0
                        self._ip[2]=0
                        self._ip[3]=0
        return self

        
class PortScannerThread(threading.Thread):
    
    def __init__(self, threadName, ip, startPortNr, endPortNr,resultCallback=None):
        threading.Thread.__init__(self)
        self._threadName= threadName
        self._startPortNr=startPortNr
        self._endPortNr=endPortNr
        self._conn= TCPconnector(ip)
        self._resCb= resultCallback
    
    def run(self):
        for port in range(self._startPortNr,self._endPortNr):    
            if(self._conn.scan(port)):
                if(self._resCb):
                    self._resCb(port)                   
     

class TCPconnector():
    
    def __init__(self,ip):
        self._ip=ip
        socket.setdefaulttimeout(DEFAULT_CONNECTION_TIMEOUT)
       
    def scan(self,port):
        ''' if connection succeeded, res ==0 '''
        try:
            _socket= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            res= _socket.connect_ex((str(self._ip),port))
        except:
            pass
        finally:
            _socket.close()
        return not res 


        
''' MAIN APP '''
results=OrderedDict()
def result(port):
    results[port]=1
    print("PORT: %d"%port+ " is open!!!")


def printResults(ip):
    print("For the IP: %s"%str(ip))
    for port,res in results.items():
        if res ==1:
            print("PORT %d is open!"%(port))

def main():
    t1= datetime.now()
    try:
        ipAddr= IPaddress(DEFAULT_IP_ADDR)
        startPort= DEFAULT_START_PORT
        nrOfPorts= NUMBER_OF_PORTS_TO_BE_SCANNED
        threads=[]
        for port in range(startPort,startPort+nrOfPorts,NUMBER_OF_PORTS_PER_THREAD):
            currentPort= port
            endPort=currentPort+NUMBER_OF_PORTS_PER_THREAD                         
            #print("START: %s | END: %s |IDs: %s, %s"%(currentPort,endPort,hex(id(currentPort)),hex(id(endPort))))
            threads.append(PortScannerThread("Thread %d"%(endPort),ipAddr,currentPort,endPort,result))
        for port in range(startPort,startPort+NUMBER_OF_PORTS_TO_BE_SCANNED):
            results[port]=0
        try:
            for t in threads:
                t.start()
            print("Number of active threads:", threading.activeCount())
            for t in threads:
                t.join()
        except:
            print("Error: Cannot start the thread")       
        print("Exiting Main Thread")
        print("Scanning time: %s"%(datetime.now()-t1))
        printResults(ipAddr)        
    except Exception as e:
        print(e)
        print("--failed--")
''' MAIN- END '''


        
if __name__ == '__main__':
    main()
